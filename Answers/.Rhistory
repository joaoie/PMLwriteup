return(list(pred = t1, proximity = object$proximity))
else return(t1)
}
else {
if (proximity)
return(list(pred = v, proximity = object$proximity))
else return(v)
}
}
if (missing(cutoff)) {
cutoff <- object$forest$cutoff
}
else {
if (sum(cutoff) > 1 || sum(cutoff) < 0 || !all(cutoff >
0) || length(cutoff) != length(object$classes)) {
stop("Incorrect cutoff specified.")
}
if (!is.null(names(cutoff))) {
if (!all(names(cutoff) %in% object$classes)) {
stop("Wrong name(s) for cutoff")
}
cutoff <- cutoff[object$classes]
}
}
if (object$type == "unsupervised")
stop("Can't predict unsupervised forest.")
if (inherits(object, "randomForest.formula")) {
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
newdata <- as.data.frame(newdata)
rn <- row.names(newdata)
Terms <- delete.response(object$terms)
x <- model.frame(Terms, newdata, na.action = na.omit)
keep <- match(row.names(x), rn)
}
else {
if (is.null(dim(newdata)))
dim(newdata) <- c(1, length(newdata))
x <- newdata
if (nrow(x) == 0)
output<-predict(miniFit,newdata=examdata)
View(examdata)
temporaryFile <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile, method="curl")
alldata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile, method="curl")
examdata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
inTrain <- createDataPartition(y=alldata$classe,
p=0.75, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
## train<-training[,8:60]
## test<-testing[,8:60]
part <- createDataPartition(y=train$classe,p=0.05, list=FALSE)
miniTrain<-train[part,]
miniFit<-train(miniTrain,miniTrain$classe)
miniFit
output<-predict(miniFit,newdata=examdata)
output<-predict(miniFit,newdata=examdata,type="terms",terms=names(miniTrain))
output<-predict(miniFit,newdata=miniTrain[1])
output<-predict(miniFit,newdata=miniTrain[1,])
output<-predict(miniFit,newdata=examdata[1,])
names(miniTrain)[1]
exam<-examdata[, colSums(is.na(examdata)) < nrow(exam) * 0.90]
output<-predict(miniFit,newdata=exam)
lapply(exam,class)
View(miniTrain)
View(exam)
output<-predict(miniFit,newdata=exam)
output<-predict(miniFit,newdata=exam[1])
output<-predict(miniFit,newdata=exam[,1])
output<-predict(miniFit,exam)
output<-predict(miniFit,data=exam)
output<-predict(miniFit,newdata=test)
output<-predict(miniFit,newdata=test)
output<-predict(miniFit,newdata=exam)
temporaryFile1 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile1, method="curl")
alldata<-read.csv(temporaryFile1,na.strings=c("NA","#DIV/0!",""))
temporaryFile2 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile2, method="curl")
examdata<-read.csv(temporaryFile2,na.strings=c("NA","#DIV/0!",""))
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
inTrain <- createDataPartition(y=alldata$classe,
p=0.75, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
exam<-examdata[, colSums(is.na(examdata)) < nrow(examdata) * 0.90]
## train<-training[,8:60]
## test<-testing[,8:60]
part <- createDataPartition(y=train$classe,p=0.05, list=FALSE)
miniTrain<-train[part,]
## View(miniTrain)
miniFit<-train(miniTrain,miniTrain$classe)
##rand<-train(training,training$classe)
##saveRDS(rand, file="myFile.rds")
##summary(rand)
confusionMatrix(predict(miniFit,newdata=test), test$classe)
confusionMatrix(predict(miniFit,newdata=exam), test$classe)
lastname<-names(exam)[,lenght(names(exam))]
lastname<-names(exam)[,len(names(exam))]
lenght
lastname<-names(exam)[,length(names(exam))]
length(names(exam)
)
names(exam)[,60]
names(exam)[,60-1]
names(exam)[60]
lastname<-names(exam)[length(names(exam))]
names(exam)<-names(test)
names(exam)[length(names(exam))]<-lastname
confusionMatrix(predict(miniFit,newdata=exam), test$classe)
tail(train)
confusionMatrix(predict(miniFit,newdata=train), test$classe)
confusionMatrix(predict(miniFit,newdata=miniTrain), test$classe)
confusionMatrix(predict(miniFit,newdata=train), train$classe)
exam2<-rbind(train,exam)
exam2<-rbind(test,exam)
exam2<-rbind(miniTrain,exam)
names(exam)<-names(test)
exam2<-rbind(test,exam)
levels(exam)
level(exam)
colClasses(exam)
a<-lapply(exam, class)
b<-lapply(miniTrain, class)
c<-cbind(a,b)
c
exam$magnet_dumbbell_z<-as.integer(exam$magnet_dumbbell_z)
exam$magnet_dumbbell_z<-as.numeric(exam$magnet_dumbbell_z)
a<-lapply(exam, class)
c
c<-cbind(a,b)
c
confusionMatrix(predict(miniFit,new=exam), exam$classe)
names(exam)[length(names(exam))]<-lastname
a<-lapply(exam, class)
c<-cbind(a,b)
c
confusionMatrix(predict(miniFit,new=exam), exam$classe)
exam2<-exam[,1:59]
confusionMatrix(predict(miniFit,newdata=exam2), exam2$classe)
exam2<-miniTrain[,1:20]
exam2<-miniTrain[1:20,]
confusionMatrix(predict(miniFit,newdata=test), test$classe)
confusionMatrix(predict(miniFit,newdata=exam), exam$classe)
modelFit
miniFit
confusionMatrix(predict(miniFit,newdata=train), train$classe)
miniFit<-train(miniTrain,miniTrain$classe,tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none"))
confusionMatrix(predict(miniFit,newdata=train), train$classe)
confusionMatrix(predict(miniFit,newdata=exam), exam$classe)
confusionMatrix(predict(miniFit,exam), exam$classe)
predict(miniFit,exam)
binded<-rbind(miniTrain,exam)
View(exam2)
View(exam)
View(miniTrain)
sum(names(miniTrain) != names(exam))
names(exam)[(names(miniTrain) != names(exam))}
names(exam)[(names(miniTrain) != names(exam))]
exam2<-exam
names(exam2)[length(names(exam2))]
names(exam2)[length(names(exam2))]<-"classe"
names(exam2)[length(names(exam2))]
binded<-rbind(miniTrain,exam2)
tail(binded,21)
exam3<-tail(binded,20)
predict(miniFit,exam3)
predict(miniFit,binded)
view(miniTrain)
View(miniTrain)
install.packages("doParallel")
library(doParallel)
registerDoParallel(cores=2)
temporaryFile1 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile1, method="curl")
alldata<-read.csv(temporaryFile1,na.strings=c("NA","#DIV/0!",""))
temporaryFile2 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile2, method="curl")
examdata<-read.csv(temporaryFile2,na.strings=c("NA","#DIV/0!",""))
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
inTrain <- createDataPartition(y=alldata$classe,p=0.75, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
## exam<-examdata[, colSums(is.na(examdata)) < nrow(examdata) * 0.90]
## train<-training[,8:60]
## test<-testing[,8:60]
part <- createDataPartition(y=train$classe,p=0.05, list=FALSE)
miniTrain<-train[part,]
## View(miniTrain)
miniFit<-train(miniTrain,miniTrain$classe,tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none"))
##rand<-train(training,training$classe)
##saveRDS(rand, file="myFile.rds")
##summary(rand)
confusionMatrix(predict(miniFit,newdata=test), test$classe)
confusionMatrix(predict(miniFit,newdata=examdata), examdata$classe)
library(doParallel)
registerDoParallel(cores=2)
temporaryFile1 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile1, method="curl")
alldata<-read.csv(temporaryFile1,na.strings=c("NA","#DIV/0!",""))
temporaryFile2 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile2, method="curl")
examdata<-read.csv(temporaryFile2,na.strings=c("NA","#DIV/0!",""))
names(examdata)<-names(alldata)
fulldata<-rbind(alldata,examdata)
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
inTrain <- createDataPartition(y=alldata[1:19622]$classe,p=0.75, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
inTrain <- createDataPartition(y=alldata[1:19622,]$classe,p=0.75, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
View(training)
View(testing)
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
## exam<-examdata[, colSums(is.na(examdata)) < nrow(examdata) * 0.90]
## train<-training[,8:60]
## test<-testing[,8:60]
part <- createDataPartition(y=train$classe,p=0.05, list=FALSE)
miniTrain<-train[part,]
## View(miniTrain)
miniFit<-train(miniTrain,miniTrain$classe,tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none"))
##rand<-train(training,training$classe)
##saveRDS(rand, file="myFile.rds")
##summary(rand)
confusionMatrix(predict(miniFit,newdata=test), test$classe)
confusionMatrix(predict(miniFit,newdata=fulldata[19623:19642,]), fulldata[19623:19642,]$classe)
fulldata[19623:19642,]$classe
fulldata[19623:19642,]
miniFit
miniFit$predictor
miniFit$predictors
miniFit$coef
miniFit$coefficients
varImp(miniFit)
View(alldata)
View(examdata)
library(doParallel)
registerDoParallel(cores=2)
temporaryFile1 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile1, method="curl")
alldata<-read.csv(temporaryFile1,na.strings=c("NA","#DIV/0!",""))
temporaryFile2 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile2, method="curl")
examdata<-read.csv(temporaryFile2,na.strings=c("NA","#DIV/0!",""))
## names(examdata)<-names(alldata)
## fulldata<-rbind(alldata,examdata)
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
alldata$X<-NULL
inTrain <- createDataPartition(y=alldata$classe,p=0.10, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
## exam<-examdata[, colSums(is.na(examdata)) < nrow(examdata) * 0.90]
## train<-training[,8:60]
## test<-testing[,8:60]
## View(miniTrain)
modelFit<-train(train,train$classe,tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none"))
##rand<-train(training,training$classe)
##saveRDS(rand, file="myFile.rds")
##summary(rand)
confusionMatrix(predict(modelFit,newdata=test), test$classe)
## confusionMatrix(predict(modelFit,newdata=fulldata[19623:19642,]), fulldata[19623:19642,]$classe)
confusionMatrix(predict(modelFit,newdata=examdata), examdata$classe)
names(examdata)[(names(train) != names(examdata))]
library(doParallel)
registerDoParallel(cores=2)
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
temporaryFile1 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile1, method="curl")
alldata<-read.csv(temporaryFile1,na.strings=c("NA","#DIV/0!",""))
temporaryFile2 <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile2, method="curl")
examdata<-read.csv(temporaryFile2,na.strings=c("NA","#DIV/0!",""))
## names(examdata)<-names(alldata)
## fulldata<-rbind(alldata,examdata)
inTrain <- createDataPartition(y=alldata$classe,p=0.10, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
## exam<-examdata[, colSums(is.na(examdata)) < nrow(examdata) * 0.90]
## train<-training[,8:60]
## test<-testing[,8:60]
## View(miniTrain)
modelFit<-train(train,train$classe,tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none"))
##rand<-train(training,training$classe)
##saveRDS(rand, file="myFile.rds")
##summary(rand)
confusionMatrix(predict(modelFit,newdata=test), test$classe)
## confusionMatrix(predict(modelFit,newdata=fulldata[19623:19642,]), fulldata[19623:19642,]$classe)
names(examdata)[(names(train) != names(examdata))]
confusionMatrix(predict(modelFit,newdata=examdata), examdata$classe)
names(examdata)[(names(alldata) != names(examdata))]
confusionMatrix(predict(modelFit,newdata=examdata), examdata$classe)
randomForest(train,train$classe)
NewFit<-randomForest(train,train$classe)
predict.randomForrest
predict.randomForest
confusionMatrix(predict(NewFit,newdata=examdata), examdata$classe)
confusionMatrix(predict(NewFit,newdata=testing), testing$classe)
confusionMatrix(predict(NewFit,newdata=test), test$classe)
confusionMatrix(predict(NewFit,newdata=examdata[,names(test)]), examdata[,names(test)]$classe)
examdata[,names(test)]
examdata[names(test),]
examdata[names(testing),]
examdata[names(testing)]
names(examdata)[(names(alldata) != names(examdata))]
library(doParallel)
registerDoParallel(cores=2)
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
## data loading
temporaryFile <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile, method="curl")
alldata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile, method="curl")
examdata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
## Training and Testing sets definition
inTrain <- createDataPartition(y=alldata$classe,p=0.05, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
## Training and Testng sets cleanup (remove columns with mostly "NA")
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
train<-train[,8:60]
## Model definition
modelFit<-train(train,train$classe)
## Cross Validation
confusionMatrix(predict(modelFit,newdata=test), test$classe)
## 20 submission set prediction
predict(modelFit, examdata)
Model2<-train(classe ~ ., data=train, method="rf")
redict(Model2, examdata)
predict(Model2, examdata)
confusionMatrix(predict(modelFit,newdata=test), test$classe)
confusionMatrix(predict(modelFit,newdata=examdata), examdata$classe)
confusionMatrix(predict(Model2,newdata=examdata), examdata$classe)
confusionMatrix(predict(Model2,examdata), examdata$classe)
predict(Model2,examdata)
library(doParallel)
registerDoParallel(cores=2)
library(randomForest)
set.seed(1000)
library(caret); library(kernlab);
## data loading
temporaryFile <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile, method="curl")
alldata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile, method="curl")
examdata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
## Training and Testing sets definition
inTrain <- createDataPartition(y=alldata$classe,p=0.05, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
## Training and Testng sets cleanup (remove columns with mostly "NA")
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
train<-train[,8:60]
## Model definition
modelFit<-train(classe ~ ., data=train, method="rf")
## Cross Validation
confusionMatrix(predict(modelFit,newdata=test), test$classe)
## 20 submission set prediction
predict(modelFit, examdata)
wd
wd()
??wd
getwd
getwd()
setwd("skydrive/coursera/pratical machine learning")
setwd("skydrive/coursera/")
dir()
dir()[4]
setwd(dir()[4])
getwd()
answers<-predict(modelFit, examdata)
a = rep("A", 20)
a
answers
as.character(answers)
answers<-as.character(predict(modelFit, examdata))
setwd("answers")
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
result_p_005<-answers
summary(modelFit)
modelFit$results
model_result_p005<-modelFit$results
temporaryFile <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile=temporaryFile, method="curl")
alldata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile=temporaryFile, method="curl")
examdata<-read.csv(temporaryFile,na.strings=c("NA","#DIV/0!",""))
## Training and Testing sets definition
inTrain <- createDataPartition(y=alldata$classe,p=0.60, list=FALSE)
training<-alldata[inTrain,]
testing<-alldata[-inTrain,]
## Training and Testng sets cleanup (remove columns with mostly "NA")
train<-training[, colSums(is.na(training)) < nrow(training) * 0.90]
test<-testing[, colSums(is.na(testing)) < nrow(testing) * 0.90]
train<-train[,8:60]
## Model definition
modelFit<-train(classe ~ ., data=train, method="rf")
## Cross Validation
confusionMatrix(predict(modelFit,newdata=test), test$classe)
## 20 submission set prediction
answers<-as.character(predict(modelFit, examdata))
View(model_result_p005)
modelFit$results
answers
saveRDS(modelFit, "modelFit_p_060.Rds")
View(train)
modelFitRPART<- train(classe ~ ., method = "rpart", data = train)
saveRDS(modelFitRPART, "modelFit_RPART.Rds")
modelFitRF_controled <- train(classe ~ .,
data = train,
method="rf",
trControl = trainControl(method = "cv", number = 4),
prox = TRUE,
allowParallel = TRUE)
saveRDS(modelFitRF_controled, "modelFitRF_controled.Rds")
fitControl2<-trainControl(method="cv", number=5, allowParallel=T)
rffit<-train(classe ~ . , data=train, method="rf", trainControl=fitControl2)
saveRDS(rffit, "rffit.Rds")
modelFit$results
modelFitRPART$results
modelFitRF_controled$results
rffit$results
answersRPART<-as.character(predict(modelFitRPART, examdata))
answersFitRF_controled<-as.character(predict(modelFitRF_controled, examdata))
answersrffit<-as.character(predict(rffit, examdata))
cbind(answers,answersRPART,answersFitRF_controled,answersrffit)
confusionMatrix(predict(modelFit,newdata=test), test$classe)
confusionMatrix(predict(modelFit,newdata=test), test$classe)$results
confusionMatrix(predict(modelFit,newdata=test), test$classe)$statistics
confusionMatrix(predict(modelFit,newdata=test), test$classe)$stats
class(confusionMatrix(predict(modelFit,newdata=test), test$classe))
?confusionMatrix
confusionMatrix(predict(modelFit,newdata=test), test$classe)$table
confusionMatrix(predict(modelFit,newdata=test), test$classe)$overall
confusionMatrix(predict(modelFit,newdata=test), test$classe)$byclass
confusionMatrix(predict(modelFit,newdata=test), test$classe)$byClass
confusionMatrix(predict(modelFit,newdata=test), test$classe)$positive
confusionMatrix(predict(modelFit,newdata=test), test$classe)$table
confusionMatrix(predict(modelFitRF_controled,newdata=test), test$classe)$table
confusionMatrix(predict(modelFitRPART,newdata=test), test$classe)$positive
confusionMatrix(predict(modelFitRPART,newdata=test), test$classe)$table
confusionMatrix(predict(rffit,newdata=test), test$classe)$table
modelFit$results
modelFitRF_controled$results
cbind(answers,answersRPART,answersFitRF_controled,answersrffit)
7*2*(52-3)*5
kmyear<-2*5*(52-3)
85/4.35
85/4.35*0.12
7*1.2
kmyear(8.4-2.34)
kmyear*(8.4-2.34)
50000/(kmyear*(8.4-2.34))
8.4-6.7
*1.3
(8.4-6.7)*1.3
10000/2.21
